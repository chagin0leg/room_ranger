name: Deploy Flutter Web to GitHub Pages

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Auto increment build number
        id: version
        run: |
          # Читаем текущую версию из pubspec.yaml
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          VERSION_PART=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          
          # Получаем общее количество коммитов в репозитории
          TOTAL_COMMITS=$(git rev-list --count HEAD)
          
          # Используем количество коммитов как build number
          NEW_VERSION="$VERSION_PART+$TOTAL_COMMITS"
          
          # Обновляем pubspec.yaml только если версия изменилась
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            sed -i "s/version: $CURRENT_VERSION/version: $NEW_VERSION/" pubspec.yaml
            echo "Updated version from $CURRENT_VERSION to $NEW_VERSION"
          else
            echo "Version unchanged: $CURRENT_VERSION"
          fi
          
          # Используем новый формат для передачи данных между шагами
          echo "version=$VERSION_PART" >> $GITHUB_OUTPUT
          echo "build=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "full_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: flutter pub get

      - name: Install, Login and Connect to VPN (background)
        run: |
          curl -fsSL https://raw.githubusercontent.com/AdguardTeam/AdGuardVPNCLI/master/scripts/release/install.sh | sh -s -- -v
          adguardvpn-cli login --username ${{ secrets.ADGUARD_VPN_USERNAME }} --password ${{ secrets.ADGUARD_VPN_PASSWORD }}
          adguardvpn-cli connect -y -6 &
          echo $! > vpn.pid

      - name: Download ICS files
        run: bash download_ics.sh

      - name: Disconnect VPN
        run: |
          kill $(cat vpn.pid) || true
          adguardvpn-cli disconnect || true
        
      - name: Build web
        run: flutter build web --release --base-href /${{ github.event.repository.name }}/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web

      - name: Get commit history
        id: commits
        run: |
          # Получаем последний тег (релиз)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            # Получаем коммиты с последнего релиза и форматируем как ссылки
            COMMIT_LIST=$(git log --oneline --no-merges --format="%H %s" ${LAST_TAG}..HEAD | head -10 | while read hash message; do
              short_hash=${hash:0:7}
              echo "- [\`$short_hash\`](https://github.com/${{ github.repository }}/commit/$hash) $message"
            done)
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_commits=true" >> $GITHUB_OUTPUT
          else
            # Если это первый релиз, получаем все коммиты
            COMMIT_LIST=$(git log --oneline --no-merges --format="%H %s" | head -10 | while read hash message; do
              short_hash=${hash:0:7}
              echo "- [\`$short_hash\`](https://github.com/${{ github.repository }}/commit/$hash) $message"
            done)
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_commits=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        run: |
          cat > release_notes.md << 'EOF'
          ## Автоматический релиз
          
          ### Версия
          - **Версия:** ${{ steps.version.outputs.version }}
          - **Сборка:** ${{ steps.version.outputs.build }}
          - **Полная версия:** ${{ steps.version.outputs.full_version }}
          
          ### Технические детали
          - Дата сборки: ${{ github.event.head_commit.timestamp }}
          - Коммит: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          EOF
          
          # Добавляем секцию изменений только если есть коммиты
          if [ "${{ steps.commits.outputs.has_commits }}" = "true" ]; then
            cat >> release_notes.md << 'EOF'
            
          ### Изменения
          ${{ steps.commits.outputs.commits }}
          EOF
          fi
          
          cat >> release_notes.md << 'EOF'
          
          ### Скачать
          - [Веб-версия](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
          EOF
          
          gh release create "v${{ steps.version.outputs.version }}-${{ steps.version.outputs.build }}" \
            --title "Room Ranger ${{ steps.version.outputs.version }} (${{ steps.version.outputs.build }})" \
            --notes-file release_notes.md \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "Update build number to ${{ steps.version.outputs.build }} (total commits: ${{ steps.version.outputs.total_commits }})" || exit 0
          git push 